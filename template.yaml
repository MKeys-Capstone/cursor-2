AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: A simple SAM template for the Disc Collection App

# Global settings
Globals:
  Function:
    Timeout: 10

Resources:
  # S3 Bucket to serve the React front-end
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # DynamoDB Table for discs
  DiscsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DiscsTable
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: discId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: discId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Lambda function to get a user's discs
  GetDiscsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: getDiscs.handler
      Runtime: nodejs14.x
      CodeUri: ./src
      Environment:
        Variables:
          DISCS_TABLE: !Ref DiscsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /discs/{userId}
            Method: GET
            RestApiId: !Ref ApiGateway

  # Lambda function to add a new disc to user's collection
  AddDiscFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: addDisc.handler
      Runtime: nodejs14.x
      CodeUri: ./src
      Environment:
        Variables:
          DISCS_TABLE: !Ref DiscsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /discs/{userId}
            Method: POST
            RestApiId: !Ref ApiGateway

  # Lambda function to update the active status of a disc
  UpdateDiscStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: updateDiscStatus.handler
      Runtime: nodejs14.x
      CodeUri: ./src
      Environment:
        Variables:
          DISCS_TABLE: !Ref DiscsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /discs/{userId}/{discId}
            Method: PUT
            RestApiId: !Ref ApiGateway

  # Lambda function to delete a disc from the user's collection
  DeleteDiscFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: deleteDisc.handler
      Runtime: nodejs14.x
      CodeUri: ./src
      Environment:
        Variables:
          DISCS_TABLE: !Ref DiscsTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /discs/{userId}/{discId}
            Method: DELETE
            RestApiId: !Ref ApiGateway

  # API Gateway to expose the Lambda functions
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DiscCollectionApi
      Description: API for managing the disc collection

  # Deploy the React app using S3
  ReactFrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

Outputs:
  ApiGatewayURL:
    Description: "API Gateway URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod"

  FrontendURL:
    Description: "Frontend URL"
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com"
